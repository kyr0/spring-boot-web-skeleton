<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.mad2man.sbweb</groupId>
    <artifactId>spring-boot-web-skeleton</artifactId>
    <version>0.0.1</version>
    <packaging>jar</packaging>

    <name>spring-boot-web-skeleton</name>
    <url>https://github.com/kyr0/spring-boot-web-skeleton</url>
    <description>Skeleton implementation for enterprise web applications following best practices.</description>

    <issueManagement>
        <url>https://github.com/kyr0/spring-boot-web-skeleton/issues</url>
        <system>GitHub Issues</system>
    </issueManagement>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>LATEST</version>
        <relativePath/>
    </parent>

    <properties>

        <!-- Using /dev/urandom as a high-speed entropy source.
             Also see: http://bugs.java.com/view_bug.do?bug_id=4705093
             And see: https://www.2uo.de/myths-about-urandom/#low-entropy
             For the syntax see Java Bug 6202721 and:
             http://stackoverflow.com/questions/137212/how-to-solve-performance-problem-with-java-securerandom -->

        <!-- Additional notice: You might want to pass more arguments like  -Xmx512m here -->
        <argLine>-Djava.security.egd=file:/dev/./urandom</argLine>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <java.version>1.8</java.version>
        <maven.min.version>3.1.0</maven.min.version>
        <maven.enforcer.plugin.version>1.4.1</maven.enforcer.plugin.version>

        <!-- Libraries -->
        <javassist.version>3.21.0-GA</javassist.version>
        <jackson.core.version>2.8.8</jackson.core.version>

        <spring.boot.version>1.5.3.RELEASE</spring.boot.version>
        <spring.security.version>4.2.2.RELEASE</spring.security.version>
        <jjwt.version>0.7.0</jjwt.version>

        <postgresql.client.verision>9.4.1212</postgresql.client.verision>

        <swagger.springfox.version>2.6.1</swagger.springfox.version>

        <hikaricp.version>2.6.0</hikaricp.version>

        <hibernate.version>5.2.8.Final</hibernate.version>
        <hibernate.jcache.version>5.2.10.Final</hibernate.jcache.version>
        <hibernate.validator.version>5.4.1.Final</hibernate.validator.version>

        <liquibase.core.version>3.5.3</liquibase.core.version>
        <liquibase.hibernate.version>3.6</liquibase.hibernate.version>
        <liquibase.slf4j.version>2.0.0</liquibase.slf4j.version>
        <javax.validation.api.version>1.1.0.Final</javax.validation.api.version>

        <apache.commons.version>3.5</apache.commons.version>

        <!-- Test libraries -->
        <test.junit.version>4.12</test.junit.version>

        <!-- Backend build tools -->
        <build.tools.frontend-maven-plugin.version>1.4</build.tools.frontend-maven-plugin.version>
        <build.tools.resources.plugin>2.6</build.tools.resources.plugin>
        <build.tools.compiler.plugin.version>3.5</build.tools.compiler.plugin.version>
        <build.tools.mapstruct.version>1.1.0.Final</build.tools.mapstruct.version>

        <!-- Frontend build tools (auto-install using maven) -->
        <build.tools.yarn.version>0.22.0</build.tools.yarn.version>
        <build.tools.node.version>6.10.2</build.tools.node.version>


    </properties>

    <dependencies>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.16</version>
            <scope>compile</scope>
        </dependency>

        <!-- apache commons, like StringUtils etc. -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${apache.commons.version}</version>
        </dependency>

        <!-- Jackson based JSON support.
             See: https://github.com/FasterXML/jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-hibernate5</artifactId>
            <version>${jackson.core.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-hppc</artifactId>
            <version>${jackson.core.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-json-org</artifactId>
            <version>${jackson.core.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>${jackson.core.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-parameter-names</artifactId>
            <version>${jackson.core.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jdk8</artifactId>
            <version>${jackson.core.version}</version>
        </dependency>

        <!-- This meta-dependency includes all required spring boot's core dependencies.
             See: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-starters/spring-boot-starter-web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>

        <!-- Spring auth starter including support for web authentication workflow support
             to protect REST method calls, PasswordEncoder -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>

        <!-- Provides implementations for JWT based token auth etc. -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>${jjwt.version}</version>
        </dependency>

        <!-- Spring web-auth module, including support for web auth annotations
             See: https://github.com/spring-projects/spring-security/tree/master/config -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring.security.version}</version>
        </dependency>

        <!-- Undertow high performance web-server.
             See: http://undertow.io/ -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>

        <!-- Actuator includes a number of additional features to help you monitor and manage your application -->
        <!-- See: https://github.com/spring-projects/spring-boot/tree/master/spring-boot-actuator -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>

        <!-- Java annotation processor which is invoked as the project is compiled.
             Maps configuration values to beans via annotations -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
            <version>${spring.boot.version}</version>
        </dependency>

        <!-- This meta-dependency includes all required spring boot's data/JPA dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <version>${spring.boot.version}</version>
        </dependency>

        <!-- Standard cache API
             See: https://static.javadoc.io/javax.cache/cache-api/1.0.0/javax/cache/package-summary.html -->
        <dependency>
            <groupId>javax.cache</groupId>
            <artifactId>cache-api</artifactId>
        </dependency>

        <!-- PostgreSQL database client library
             See: https://github.com/pgjdbc/pgjdbc -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.client.verision}</version>
        </dependency>

        <!-- High performance DataSource implementation with connection pooling.
             See: http://brettwooldridge.github.io/HikariCP/ -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
        </dependency>

        <!-- Hibernate ORM
             See: https://github.com/hibernate/hibernate-orm -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-envers</artifactId>
            <version>${hibernate.version}</version>
        </dependency>

        <!-- jcache bridge 2nd level query cache for hibernate
             See: https://github.com/hibernate/hibernate-orm/tree/master/hibernate-jcache -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-jcache</artifactId>
            <version>${hibernate.jcache.version}</version>
        </dependency>

        <!-- Liquibase database revisioning system
             See: https://github.com/liquibase/liquibase
             And see: http://www.liquibase.org/ -->
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
            <version>${liquibase.core.version}</version>
        </dependency>

        <!-- liquibase bridge for use with Hibernate 5
             See: https://github.com/liquibase/liquibase-hibernate -->
        <dependency>
            <groupId>org.liquibase.ext</groupId>
            <artifactId>liquibase-hibernate5</artifactId>
            <version>${liquibase.hibernate.version}</version>
        </dependency>

        <!-- Make liquibase send logs to SLF4J logging facade (wires to logback of Spring Boot).
             See: https://www.slf4j.org/
             And see: https://github.com/mattbertolini/liquibase-slf4j -->
        <dependency>
            <groupId>com.mattbertolini</groupId>
            <artifactId>liquibase-slf4j</artifactId>
            <version>${liquibase.slf4j.version}</version>
        </dependency>

        <!-- Java bean mappings at compile time. Uses plain method invocations
             See: mapstruct.org -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-jdk8</artifactId>
            <version>${build.tools.mapstruct.version}</version>
        </dependency>

        <!-- Automated JSON API documentation for API's built with Spring.
             See: http://springfox.github.io/springfox/ -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger.springfox.version}</version>
            <exclusions>
                <exclusion>
                    <artifactId>mapstruct</artifactId>
                    <groupId>org.mapstruct</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- To create a webjar containing the swagger-ui static content
             See: https://github.com/springfox/springfox/tree/master/springfox-swagger-ui -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger.springfox.version}</version>
        </dependency>

        <!-- JUnit test framework
             See: https://github.com/junit-team/junit4/wiki/Getting-started -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${test.junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <defaultGoal>spring-boot:run</defaultGoal>

        <plugins>

            <!-- Enforce specific environment tooling versions -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>${maven.enforcer.plugin.version}</version>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <rules>
                        <requireMavenVersion>
                            <message>You are running an older version of Maven. Skeleton requires at least Maven ${maven.min.version}</message>
                            <version>[${maven.min.version},)</version>
                        </requireMavenVersion>
                        <requireJavaVersion>
                            <message>You are running an older version of Java. Skeleton requires at least JDK ${java.version}</message>
                            <version>[${java.version}.0,)</version>
                        </requireJavaVersion>
                    </rules>
                </configuration>
            </plugin>

            <!-- package executable jar or war archives and run an application “in-place” -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!--
                    Enable the line below to have remote debugging of your application on port 5005
                    <jvmArguments>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</jvmArguments>
                    -->
                </configuration>

                <executions>
                    <execution>
                        <goals>
                            <!-- Repackages existing JAR so that it can be executed using java -jar -->
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Installs yarn package manager (see yarnpkg.com) and installs all node dependencies in
                 generate-resource phase. Node dependencies are declared in src/main/webapp/libs/package.json -->
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <configuration>
                    <workingDirectory>src/main/webapp/libs</workingDirectory>
                </configuration>
                <version>${build.tools.frontend-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>install-node-and-yarn</id>
                        <goals>
                            <goal>install-node-and-yarn</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <nodeVersion>v${build.tools.node.version}</nodeVersion>
                            <yarnVersion>v${build.tools.yarn.version}</yarnVersion>
                        </configuration>
                    </execution>
                    <execution>
                        <id>yarn install</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <configuration>
                            <arguments>install --force</arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Handles the copying of project resources from webapp to static content
                 output directory excluding  -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${build.tools.resources.plugin}</version>
                <executions>

                    <execution>
                        <id>copy-resources</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <encoding>UTF-8</encoding>
                            <nonFilteredFileExtensions>
                                <nonFilteredFileExtension>svg</nonFilteredFileExtension>
                                <nonFilteredFileExtension>woff2</nonFilteredFileExtension>
                                <nonFilteredFileExtension>woff</nonFilteredFileExtension>
                                <nonFilteredFileExtension>eot</nonFilteredFileExtension>
                                <nonFilteredFileExtension>ttf</nonFilteredFileExtension>
                                <nonFilteredFileExtension>ico</nonFilteredFileExtension>
                            </nonFilteredFileExtensions>
                            <outputDirectory>${basedir}/target/classes/static</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/webapp</directory>
                                    <excludes>
                                        <exclude>libs/node/**</exclude>
                                        <exclude>libs/package.json</exclude>
                                    </excludes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                </executions>

            </plugin>

            <!-- Process annotation mappings using mapstruct -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${build.tools.compiler.plugin.version}</version>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${build.tools.mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!--
            <plugin>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok-maven-plugin</artifactId>
                <version>1.16.8.0</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>delombok</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <addOutputDirectory>false</addOutputDirectory>
                    <sourceDirectory>src/main/java</sourceDirectory>
                    <outputDirectory>target/generated-sources</outputDirectory>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            -->

            <!-- Run liquibase -->
            <plugin>
                <groupId>org.liquibase</groupId>
                <artifactId>liquibase-maven-plugin</artifactId>
                <version>${liquibase.core.version}</version>

                <dependencies>
                    <dependency>
                        <groupId>javax.validation</groupId>
                        <artifactId>validation-api</artifactId>
                        <version>${javax.validation.api.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.javassist</groupId>
                        <artifactId>javassist</artifactId>
                        <version>${javassist.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.liquibase.ext</groupId>
                        <artifactId>liquibase-hibernate5</artifactId>
                        <version>${liquibase.hibernate.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-data-jpa</artifactId>
                        <version>${spring.boot.version}</version>
                    </dependency>
                </dependencies>

                <configuration>
                    <changeLogFile>src/main/resources/config/liquibase/master.xml</changeLogFile>
                    <diffChangeLogFile>src/main/resources/config/liquibase/changelog/${maven.build.timestamp}_changelog.xml</diffChangeLogFile>
                    <driver>org.postgresql.Driver</driver>
                    <url>jdbc:postgresql://localhost:5432/skeleton</url>
                    <defaultSchemaName />
                    <username>skeleton</username>
                    <password />
                    <referenceUrl>hibernate:spring:com.mad2man.sbweb.domain?dialect=com.mad2man.sbweb.config.FixedPostgreSQL82Dialect&amp;hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&amp;hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy</referenceUrl>
                    <verbose>true</verbose>
                    <logging>debug</logging>
                </configuration>
            </plugin>

        </plugins>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>

    <profiles>

        <!-- development profile using undertow embedded web-server and devtools -->
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!-- log configuration -->
                <logback.loglevel>DEBUG</logback.loglevel>
                <!-- default Spring profiles -->
                <spring.profiles.active>dev</spring.profiles.active>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-devtools</artifactId>
                    <version>${spring.boot.version}</version>
                    <optional>true</optional>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>

        <!-- production profile -->
        <profile>
            <id>prod</id>

            <properties>
                <!-- log configuration -->
                <logback.loglevel>INFO</logback.loglevel>
                <!-- default Spring profiles -->
                <spring.profiles.active>prod</spring.profiles.active>
            </properties>

            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-clean-plugin</artifactId>
                        <configuration>
                            <filesets>
                                <fileset>
                                    <directory>target/www/</directory>
                                </fileset>
                            </filesets>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>build-info</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <executable>true</executable>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
